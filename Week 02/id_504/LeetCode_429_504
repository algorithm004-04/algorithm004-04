/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> ans = new ArrayList<>();
        Queue<Node> queue = new LinkedList<Node>();
        queue.offer(root);
        int n = 1;
        int s = 0;
        List<Integer> curLayer = new ArrayList<>();
        while(n > 0){
            Node cur = queue.poll();
            if(cur != null){
                curLayer.add(cur.val);
                for(Node node : cur.children){
                    queue.offer(node);
                    s ++;
                }
            }
            n--;
            if(n == 0){
                n = s;
                s = 0;
                if(curLayer.size()> 0)
                    ans.add(curLayer);
                curLayer = new ArrayList<>();
            }
        }
        return ans;
    }
}